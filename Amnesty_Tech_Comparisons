from rapidfuzz import fuzz, process
import pandas as pd

# File paths
CSV_FILE = 'synthetic_iphone_latest.csv'
KNOWN_PROCESSES_FILE = '/home/seed/GitDirectory/ML/all_processes.txt'

# Fuzzy match threshold (0-100)
THRESHOLD = 100

# Load main CSV file
df = pd.read_csv(CSV_FILE)

# Get unique process names from the dataframe
distinct_procs = df['procName'].dropna().unique().tolist()

# Load known malicious processes (lowercased and stripped)
with open(KNOWN_PROCESSES_FILE, 'r', encoding='utf-8') as f:
    known_procs = [line.strip().lower() for line in f if line.strip()]

def fuzzy_check(name, known_list):
    """Return best fuzzy match if over threshold and similar in length."""
    name_lower = name.lower()
    match, score, _ = process.extractOne(name_lower, known_list, scorer=fuzz.token_set_ratio)
    if score >= THRESHOLD:
        len_ratio = min(len(name_lower), len(match)) / max(len(name_lower), len(match))
        if len_ratio >= 0.7:
            return match, score
    return None, 0

# Match against known malicious processes
proc_matches = []
for proc in distinct_procs:
    match, score = fuzzy_check(proc, known_procs)
    if match:
        proc_matches.append((proc, match, score))


def print_matched_processes(proc_matches):
    print("\n=== Fuzzy Matches in Known Malicious Processes ===")
    for orig, matched, score in proc_matches:
        print(f"{orig}  -->  {matched}  (score: {score})")


def print_affected_devices(proc_matches, df):
    print("\n=== Devices with Matched Malicious Processes ===")
    for orig_proc, matched_proc, score in proc_matches:
        matching_devices = df[df['procName'] == orig_proc]['device'].unique()
        devices_list = ", ".join(matching_devices) if len(matching_devices) > 0 else "No devices found"
        print(f"Process: {orig_proc}  --> Matched: {matched_proc}  (score: {score})")
        print(f"Devices: {devices_list}\n")



